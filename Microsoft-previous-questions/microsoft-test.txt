microsoft-1 :- 
There are N clients who have ordered N handmade items. The K-th client ordered exactly one item that takes T[K] hours 
to make. There is only one employee who makes items for clients, and they work in the following manner:

1.spend one hour making the first item;
2. if the item is finished, the employee delivers it to client immediately.
3. If the item is not finished, they put it after the N - th item for further work;
4. the employee starts making the next item.

FOr example FOR t = [3, 1, 2], the employee spends 6 hours making items in the following order : [1, 2, 3, 1, 3, 1] ,
the first client waited 6 hours for their item, second client received their item after 2 hours and
the third client after 5 hours, what is the total time that clients need to wait for all the ordered
items ? For the above example, the answer is 6 + 2 + 5 = 13

As the result may be large, return it's last nine digits without leading zeros (In other words, return
the result module 10 to the power 9).

write a function : -
int solution(vector<int> &T);
that given an array of integers T of length N , return the total time that the client needs
to wait (modulo 10 the power 9)

write an efficient algorithm for following assumption :-
N is integer with range 1..100000
each element of array T is an integer within the range 1..10000

Solution :- 
#include<queue>

int solution(vector<int> &T) 
{
    // Implement your solution here
        std::queue<int> q;
        for (int hour : T) 
        {
            q.push(hour);
        }
        int totalTime = 0, waitTime = 0;
        while (!q.empty()) 
        {
            int first = q.front();
            q.pop();
            totalTime += 1;
            first -= 1;
            if (first == 0)
            {
                waitTime += totalTime;
            }
            else 
            {
                q.push(first);
            }
        }
        return waitTime%1000000000;
}


Microsoft-2) You are given an undirected graph consisting of N vertices numbered from 1 to N and M edges.

The graph is described by two arrays A and B , both of length M. A pair (A[K], B[K]), for 
K from 0 TO M-1, describe an edge between vertex A[K] and vertex B[K].

Your task is to check whether the given graph contains a path from vertex 1 to vertex N going
through all of the vertices, one by one , in increasing order of their numbers. All connections
on the path should be direct.

write a function :-
bool solution (int N , vector<int> &A , vector<int> &B) ;


that given an integer N and two arrays A and B of M integers each, return true if there exists a 
path from vertex 1 to N going through all vertices , one by one , in increasing order
or false otherwise.

solution :-

// you can use includes, for example:
// #include <algorithm>
#include<vector>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;
bool dfs(std::vector<std::vector<int>>& graph, std::vector<bool>& visited, std::vector<int>& path, int N) 
{
    if (path.back() == N) 
    {
        return true;
    }
    for (int neighbor : graph[path.back()]) 
    {
        if (!visited[neighbor] && neighbor == path.back() + 1) 
        {
            visited[neighbor] = true;
            path.push_back(neighbor);
            if (dfs(graph, visited, path, N)) 
            {
                return true;
            }
            path.pop_back();
            visited[neighbor] = false;
        }
    }
    return false;
}

bool solution(int N, vector<int> &A, vector<int> &B) 
{
    // Implement your solution here
    std::vector<std::vector<int>> graph(N + 1);
    for (size_t i = 0; i < A.size(); i++)
    {
        graph[A[i]].push_back(B[i]);
        graph[B[i]].push_back(A[i]);
    }
    std::vector<bool> visited(N + 1, false);
    std::vector<int> path = {1};
    visited[1] = true;
    return dfs(graph, visited, path, N);
}

3) string question :-
// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;
#include <iostream>
#include <unordered_map>
#include <string>
#include <climits>
using namespace std;

int solution(string &letters) {
     unordered_map<char, int> last_lower_pos;
  unordered_map<char, int> first_upper_pos;

 
  for (size_t i = 0; i < letters.size(); ++i) 
  {
      char ch = letters[i];
      if (islower(ch)) 
      {
          last_lower_pos[ch] = i; 
      }
      else if (isupper(ch)) 
      {
          char lower_ch = tolower(ch);
          if (first_upper_pos.find(lower_ch) == first_upper_pos.end()) 
          {
              first_upper_pos[lower_ch] = i; 
          }
      }
  }

  int count = 0;


  for (const auto& entry : last_lower_pos) 
  {
      char ch = entry.first;
      if (first_upper_pos.find(ch) != first_upper_pos.end()) 
      {
          if (last_lower_pos[ch] < first_upper_pos[ch]) 
          {
              count++;
          }
      }
  }

  return count;
}


4) Tree question :-
#include <iostream>
#include <unordered_set>
#include <string>

using namespace std;
void generateThreeDigitNumbers(tree* node, string currentNum, unordered_set<int> &results)
{
    if (!node) return;
    currentNum += to_string(node->x);

    if (currentNum.length() == 3) 
    {
        results.insert(stoi(currentNum));
        return;
    }

    if (node->l) generateThreeDigitNumbers(node->l, currentNum, results);
    if (node->r) generateThreeDigitNumbers(node->r, currentNum, results);
}

void exploreTree(tree* node, unordered_set<int> &results)
{
    if (!node) return;

    if (node->l)
    {
        if (node->l->l) generateThreeDigitNumbers(node, "", results);
        if (node->l->r) generateThreeDigitNumbers(node, "", results);
    }

    if (node->r) 
    {
        if (node->r->l) generateThreeDigitNumbers(node, "", results);
        if (node->r->r) generateThreeDigitNumbers(node, "", results);
    }

    exploreTree(node->l, results);
    exploreTree(node->r, results);
}

int solution(tree* T) 
{
    if (!T) return 0;

    unordered_set<int> results;

    exploreTree(T, results);

    return results.size();
}


3)generative AI :-
// ------------ Solution 0 ------------
int solution0(int A, int B) {
    return A / 4;
}

void answer_solution0() {
    cout << "1 3";
}

// ------------ Solution 1 ------------
int solution1(int A, int B) {
    auto count_pieces = [](int length, int stick1, int stick2) -> int {
        // Returns the total number of pieces of length `length` that can be cut
        // from both sticks, taking into account any leftover pieces
        return (stick1 / length) + (stick2 / length);
    };

    auto can_form_square = [&](int length, int stick1, int stick2) -> bool {
        // Returns True if it's possible to form a square with side length `length`
        // by cutting both sticks into pieces of length `length`
        return count_pieces(length, stick1, stick2) >= 4;
    };

    // Try all possible lengths of the square, starting from the longest
    for (int length = min(A, B); length > 0; length--) {
        if (can_form_square(length, A, B)) {
            return length;
        }
    }
    return 0;
}

void answer_solution1() {
    cout << "This solution uses a greedy approach by checking each possible square size from largest to smallest.";
}

// ------------ Solution 2 ------------
int solution2(int A, int B) {
    auto can_form_square = [&](int side_length) -> bool {
        // Calculate the number of sticks of length `side_length` we can cut from the two sticks
        int num_a = A / side_length;
        int num_b = B / side_length;
        return num_a + num_b >= 4;
    };

    // Binary search for the largest possible square
    int lo = 0;
    int hi = B;
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        if (can_form_square(mid)) {
            lo = mid + 1;
        } else {
            hi = mid - 1;
        }
    }
    return hi;
}

void answer_solution2() {
    cout << "This solution uses binary search to efficiently find the largest square size.";
}

// ------------ Solution 3 ------------
int solution3(int A, int B) {
    // Swap A and B if B is greater than A, so that A is always the larger stick
    if (B > A) {
        swap(A, B);
    }

    // Calculate the longest possible square side that can be constructed from A and B
    int longest_side = max(A / 4, max(min(A / 3, B), B / 2));

    // Return the longest side of the square
    return longest_side;
}

void answer_solution3() {
    cout << "This solution tries to maximize the square size by considering three different cases.";
}

// ------------ Solution 4 ------------
int solution4(int A, int B) {
    int result = 1;
    // Try all possible stick lengths, starting from the maximum
    for (int length = 1; length < A + B; length++) {
        // Calculate the number of pieces we can get from each stick
        int pieces_A = A / length;
        int pieces_B = B / length;

        // If we can get at least four pieces from each stick, return the length
        if (pieces_A + pieces_B >= 4) {
            result = max(result, length);
        }
    }
    // Return the calculated result
    return result;
}

void answer_solution4() {
    cout << "This solution tries all possible stick lengths starting from 1.";
}

// ------------ Solution 5 ------------
int solution5(int A, int B) {
    // Calculate the maximum number of sticks of length (A/4) that can be obtained from A
    int case1 = A / 4;

    // Calculate the maximum number of sticks of length min(A/3, B) that can be obtained from A and B
    int case2 = min(A / 3, B);

    // Calculate the maximum number of sticks of length (B/2) that can be obtained from B
    int case3 = B / 2;

    // Return the largest number of sticks that can be obtained from the three cases
    return max(case1, max(case2, case3));
}

void answer_solution5() {
    cout << "This solution considers three scenarios to find the maximum square size.";
}

// ------------ Solution 6 ------------
int solution6(int A, int B) {
    // initialize variable to keep track of maximum square size
    int maxSize = 0;

    // check if it's possible to create 4 sticks of equal length with A and B
    // and update maxSize accordingly
    maxSize = max(maxSize, B / 4);

    // check if it's possible to create 4 sticks of equal length with B divided
    // into 3 parts and update maxSize accordingly if A is long enough
    if (A >= B / 3) {
        maxSize = max(maxSize, B / 3);
    }

    // check if it's possible to create 4 sticks of equal length with B divided
    // into 2 parts and update maxSize accordingly if A is long enough
    if (A >= 2 * (B / 2)) {
        maxSize = max(maxSize, B / 2);
    }

    // check if it's possible to create 4 sticks of equal length with A divided
    // into 3 parts and update maxSize accordingly if B is long enough
    if (B >= A / 3) {
        maxSize = max(maxSize, A / 3);
    }

    // check if it's possible to create 4 sticks of equal length with A
    // and update maxSize accordingly
    maxSize = max(maxSize, A / 4);

    return maxSize;
}

void answer_solution6() {
    cout << "This solution checks various ways to cut the sticks and returns the maximum square size.";
}
